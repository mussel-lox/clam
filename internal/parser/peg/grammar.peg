// Lox syntax in PEG definitions.
//
// This file contains PEG definitions of Lox language, referenced from https://craftinginterpreters.com/appendix-i.html.

{
	//revive:disable
	package peg

	import (
		"bytes"
		"errors"
		"strconv"
		"strings"
		
		"github.com/mussel-lox/clam/ast"
	)

	func matchedTextOf(c *current) string {
		return strings.TrimSpace(string(c.text))
	}
}


// Lexical Grammar

_ "WHITESPACES" = [ \t\r\n]*

ALPHA = [a-zA-Z_]
DIGIT = [0-9]

IDENTIFIER = _ ALPHA ( ALPHA / DIGIT )* _ {
	str := matchedTextOf(c)
	return ast.Identifier(str), nil
}

STRING = _ '"' [^"]* '"' _ {
	str := matchedTextOf(c)
	return ast.StringLiteral(str), nil
}

NUMBER = _ DIGIT+ ("." DIGIT+)? _ {
	str := matchedTextOf(c)
	n, err := strconv.ParseFloat(str, 64)
	if err != nil {
		return nil, err
	}
	return ast.NumberLiteral(n), nil
}

LEFT_PAREN    = _ "(" _ { return TokLeftParenthesis, nil }
RIGHT_PAREN   = _ ")" _ { return TokRightParenthesis, nil }
LEFT_BRACE    = _ "{" _ { return TokLeftBrace, nil }
RIGHT_BRACE   = _ "}" _ { return TokRightBrace, nil }
COMMA         = _ "," _ { return TokComma, nil }
DOT           = _ "." _ { return TokDot, nil }
MINUS         = _ "-" _ { return TokMinus, nil }
PLUS          = _ "+" _ { return TokPlus, nil }
SEMICOLON     = _ ";" _ { return TokSemicolon, nil }
SLASH         = _ "/" _ { return TokSlash, nil }
STAR          = _ "*" _ { return TokStar, nil }
BANG          = _ "!" _ { return TokBang, nil }
EQUAL         = _ "=" _ { return TokEqual, nil }
GREATER       = _ ">" _ { return TokGreater, nil }
LESS          = _ "<" _ { return TokLess, nil }

BANG_EQUAL    = _ "!=" _ { return TokBangEqual, nil }
EQUAL_EQUAL   = _ "==" _ { return TokEqualEqual, nil }
GREATER_EQUAL = _ ">=" _ { return TokGreaterEqual, nil }
LESS_EQUAL    = _ "<=" _ { return TokLessEqual, nil }

AND           = _ "and"    _ { return TokAnd, nil }
CLASS         = _ "class"  _ { return TokClass, nil }
ELSE          = _ "else"   _ { return TokElse, nil }
FALSE         = _ "false"  _ { return TokFalse, nil }
FOR           = _ "for"    _ { return TokFor, nil }
FUN           = _ "fun"    _ { return TokFun, nil }
IF            = _ "if"     _ { return TokIf, nil }
NIL           = _ "nil"    _ { return TokNil, nil }
OR            = _ "or"     _ { return TokOr, nil }
PRINT         = _ "print"  _ { return TokPrint, nil }
RETURN        = _ "return" _ { return TokReturn, nil }
SUPER         = _ "super"  _ { return TokSuper, nil }
THIS          = _ "this"   _ { return TokThis, nil }
TRUE          = _ "true"   _ { return TokTrue, nil }
VAR           = _ "var"    _ { return TokVar, nil }
WHILE         = _ "while"  _ { return TokWhile, nil }


// Utility Rules

arguments = pat:(Expression (COMMA Expression)*) {
	var args []ast.Expression

	p := pat.([]any)
	args = append(args, p[0].(ast.Expression))
	for _, repeat := range p[1].([]any) {
		pattern := repeat.([]any)
		args = append(args, pattern[1].(ast.Expression))
	}
	return args, nil
}

parameters = pat:(IDENTIFIER (COMMA IDENTIFIER)*) {
	var idents []ast.Identifier

	p := pat.([]any)
	idents = append(idents, p[0].(ast.Identifier))
	for _, repeat := range p[1].([]any) {
		pattern := repeat.([]any)
		idents = append(idents, pattern[1].(ast.Identifier))
	}
	return idents, nil
}

function = name:IDENTIFIER LEFT_PAREN params:parameters? RIGHT_PAREN body:Block {
	return &ast.FunDeclaration{
		Name:       name.(ast.Identifier),
		Parameters: params.([]ast.Identifier),
		Body:				body.(*ast.BlockStatement),
	}, nil
} / IDENTIFIER LEFT_PAREN parameters RIGHT_PAREN {
	return nil, errors.New("expected function body block")
} / IDENTIFIER LEFT_PAREN parameters {
	return nil, errors.New("expected right parenthesis")
} / IDENTIFIER LEFT_PAREN {
	return nil, errors.New("expected parameters or right parenthesis")
} / IDENTIFIER {
	return nil, errors.New("expected left parenthesis")
}


// Expression Grammar

Primary
	= TRUE         { return ast.BooleanLiteral(true), nil }
	/ FALSE        { return ast.BooleanLiteral(false), nil }
	/ NIL          { return ast.Nil{}, nil }
	/ THIS         { return ast.This{}, nil }
	/ n:NUMBER     { return n, nil }
	/ s:STRING     { return s, nil }
	/ i:IDENTIFIER { return i, nil }
	/ LEFT_PAREN e:Expression RIGHT_PAREN {
		return e, nil
	}
	/ SUPER DOT i:IDENTIFIER {
		return &ast.PropertyAccessExpression{
			Target:   ast.Super{},
			Property: i.(ast.Identifier),
		}, nil
	}

Call = e:Primary pat:(LEFT_PAREN arguments? RIGHT_PAREN / DOT IDENTIFIER)* {
	expr := e.(ast.Expression)
	for _, p := range pat.([]any) {
		pattern := p.([]any)
		switch pattern[0].(TokenKind) {
		case TokLeftParenthesis:
			expr = &ast.InvocationExpression {
				Callee:    expr,
				Arguments: pattern[1].([]ast.Expression),
			}
		case TokDot:
			expr = &ast.PropertyAccessExpression {
				Target:   expr,
				Property: pattern[1].(ast.Identifier),
			}
		default:
			panic("unreachable case in peg::grammar::Call")
		}
	}
	return expr, nil
}

Unary = op:(BANG / MINUS) u:Unary {
	var operator ast.UnaryOperator
	switch op.(TokenKind) {
	case TokBang:
		operator = ast.UopLogicalNot
	case TokMinus:
		operator = ast.UopNegate
	default:
		panic("unreachable case in peg::grammar::Unary")
	}
	return &ast.UnaryExpression{
		Operator: operator,
		Operand:  u.(ast.Expression),
	}, nil
} / Call

Factor     = l:Unary      pat:((SLASH / STAR) Unary)*                               { return parseBinary(l, pat), nil }
Term       = l:Factor     pat:((MINUS / PLUS) Factor)*                              { return parseBinary(l, pat), nil }
Comparison = l:Term       pat:((GREATER_EQUAL / LESS_EQUAL / GREATER / LESS) Term)* {	return parseBinary(l, pat), nil }
Equality   = l:Comparison pat:((BANG_EQUAL / EQUAL_EQUAL) Comparison)*              { return parseBinary(l, pat), nil }
LogicalAnd = l:Equality   pat:(AND Equality)*                                       { return parseBinary(l, pat), nil }
LogicalOr  = l:LogicalAnd pat:(OR LogicalAnd)*                                      { return parseBinary(l, pat), nil }

Assignment = prev:(Call DOT)? i:IDENTIFIER EQUAL e:Assignment {
	var expr ast.Expression
	if prev != nil {
		previous := prev.([]any)
		expr = &ast.PropertyAccessExpression {
			Target:   previous[0].(ast.Expression),
			Property: i.(ast.Identifier),
		}
	} else {
		expr = i.(ast.Expression)
	}
	return &ast.AssignmentExpression{
		Target: expr,
		Value:  e.(ast.Expression),
	}, nil
} / LogicalOr

Expression = Assignment


// Statement Grammar

Statement
	= ForStatement
	/ IfStatement
	/ PrintStatement
	/ ReturnStatement
	/ WhileStatement
	/ Block
	/ ExpressionStatement

ExpressionStatement = e:Expression SEMICOLON {
	if e == nil {
		return nil, nil // errors are reported earlier. just return.
	}
	return &ast.ExpressionStatement{Expression: e.(ast.Expression)}, nil
} / Expression {
	return nil, errors.New("expected semicolon")
}

ForStatement = FOR LEFT_PAREN 
	init:(VarDeclaration / ExpressionStatement / SEMICOLON) 
	cond:Expression? SEMICOLON 
	inc:Expression?
RIGHT_PAREN b:Statement
{
	stmt := &ast.ForStatement {
		Body: b.(ast.Statement),
	}
	switch initializer := init.(type) {
	case *ast.VarDeclaration:
		stmt.VarInitializer = initializer
	case ast.Expression:
		stmt.ExpressionInitializer = initializer
	}
	if cond != nil {
		stmt.Condition = cond.(ast.Expression)
	}
	if inc != nil {
		stmt.Increment = inc.(ast.Expression)
	}
	return stmt, nil
} / FOR LEFT_PAREN (VarDeclaration / ExpressionStatement / SEMICOLON) Expression? SEMICOLON Expression? RIGHT_PAREN {
	return nil, errors.New("expected statement")
} / FOR LEFT_PAREN (VarDeclaration / ExpressionStatement / SEMICOLON) Expression? SEMICOLON Expression? {
	return nil, errors.New("expected right parenthesis")
} / FOR LEFT_PAREN (VarDeclaration / ExpressionStatement / SEMICOLON) Expression? {
	return nil, errors.New("expected semicolon")
} / FOR LEFT_PAREN {
	return nil, errors.New("expected var declaration, expression or semicolon")
} / FOR {
	return nil, errors.New("expected left parenthesis")
}

IfStatement = IF LEFT_PAREN cond:Expression RIGHT_PAREN then:Statement otherwise:(ELSE Statement)? {
	stmt := &ast.IfStatement {
		Condition: cond.(ast.Expression),
		Then:      then.(ast.Statement),
	}
	if otherwise != nil {
		stmt.Otherwise = (otherwise.([]any))[1].(ast.Statement)
	}
	return stmt, nil
} / IF LEFT_PAREN Expression RIGHT_PAREN Statement ELSE {
	return nil, errors.New("expected statement of else branch")
} / IF LEFT_PAREN Expression RIGHT_PAREN {
	return nil, errors.New("expected statement")
} / IF LEFT_PAREN Expression {
	return nil, errors.New("expected right parenthesis")
} / IF LEFT_PAREN {
	return nil, errors.New("expected if condition")
} / IF {
	return nil, errors.New("expected left parenthesis")
}

PrintStatement = PRINT e:Expression SEMICOLON {
	return &ast.PrintStatement{
		Expression: e.(ast.Expression),
	}, nil
} / PRINT Expression {
	return nil, errors.New("expected semicolon")
} / PRINT {
	return nil, errors.New("expected expression")
}

ReturnStatement = RETURN e:Expression? SEMICOLON {
	stmt := new(ast.ReturnStatement)
	if e != nil {
		stmt.Expression = e.(ast.Expression)
	}
	return stmt, nil
} / RETURN Expression? {
	return nil, errors.New("expected semicolon")
}

WhileStatement = WHILE LEFT_PAREN cond:Expression RIGHT_PAREN b:Statement {
	return &ast.WhileStatement{
		Condition: cond.(ast.Expression),
		Body:      b.(ast.Statement),
	}, nil
} / WHILE LEFT_PAREN Expression RIGHT_PAREN {
	return nil, errors.New("expected while body statement")
} / WHILE LEFT_PAREN Expression {
	return nil, errors.New("expected right parenthesis")
} / WHILE LEFT_PAREN {
	return nil, errors.New("expected while condition")
} / WHILE {
	return nil, errors.New("expected left parenthesis")
}

Block = LEFT_BRACE d:Declaration* RIGHT_BRACE {
	var decls []ast.Declaration
	for _, decl := range d.([]any) {
		if decl == nil {
			return nil, nil // errors are reported earlier. just return.
		}
		decls = append(decls, decl.(ast.Declaration))
	}
	return &ast.BlockStatement{Declarations: decls}, nil
} / LEFT_BRACE Declaration* {
	return nil, errors.New("expected closing right brace of block")
}


// Declaration Grammar

Declaration
	= ClassDeclaration
	/ FunDeclaration
	/ VarDeclaration
	/ StatementDeclaration

StatementDeclaration = s:Statement {
	if s == nil {
		return nil, nil // errors are reported earlier. just return.
	}
	return &ast.StatementDeclaration{Statement: s.(ast.Statement)}, nil
}

ClassDeclaration = CLASS i:IDENTIFIER ext:(LESS IDENTIFIER)? LEFT_BRACE m:function* RIGHT_BRACE {
	var methods []ast.FunDeclaration
	for _, method := range m.([]any) {
		methods = append(methods, method.(ast.FunDeclaration))
	}
	decl := &ast.ClassDeclaration {
		Name:    i.(ast.Identifier),
		Methods: methods,
	}
	if ext != nil {
		decl.Baseclass = new(ast.Identifier)
		*decl.Baseclass = (ext.([]any))[1].(ast.Identifier)
	}
	return decl, nil
} / CLASS IDENTIFIER LESS IDENTIFIER LEFT_BRACE function* {
	return nil, errors.New("expected closing right brace of class")
} / CLASS IDENTIFIER LESS IDENTIFIER {
	return nil, errors.New("expected opening left brace of class")
} / CLASS IDENTIFIER LESS {
	return nil, errors.New("expected baseclass name")
} / CLASS IDENTIFIER LEFT_BRACE function* {
	return nil, errors.New("expected closing right brace of class")
} / CLASS IDENTIFIER {
	return nil, errors.New("expected opening left brace of class")
} / CLASS {
	return nil, errors.New("expected class name")
}

FunDeclaration = FUN f:function { return f, nil }

VarDeclaration = VAR i:IDENTIFIER init:(EQUAL Expression)? SEMICOLON {
	decl := &ast.VarDeclaration {
		Name: i.(ast.Identifier),
	}
	if init != nil {
		decl.Initializer = (init.([]any))[1].(ast.Expression)
	}
	return decl, nil
} / VAR IDENTIFIER EQUAL Expression {
	return nil, errors.New("expected semicolon")
} / VAR IDENTIFIER EQUAL {
	return nil, errors.New("expected expression")
} / VAR IDENTIFIER {
	return nil, errors.New("expected semicolon")
} / VAR {
	return nil, errors.New("expected variable name")
}

// The final program consists of some declarations.

Program = d:Declaration* {
	var decls []ast.Declaration
	for _, decl := range d.([]any) {
		if decl == nil {
			return nil, nil // errors are reported earlier. just return.
		}
		decls = append(decls, decl.(ast.Declaration))
	}
	return decls, nil
}