// Code generated by pigeon; DO NOT EDIT.

//revive:disable
package peg

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/mussel-lox/clam/ast"
)

func matchedTextOf(c *current) string {
	return strings.TrimSpace(string(c.text))
}

var g = &grammar{
	rules: []*rule{
		{
			name:        "_",
			displayName: "\"WHITESPACES\"",
			pos:         position{line: 25, col: 1, offset: 390},
			expr: &zeroOrMoreExpr{
				pos: position{line: 25, col: 19, offset: 408},
				expr: &charClassMatcher{
					pos:        position{line: 25, col: 19, offset: 408},
					val:        "[ \\t\\r\\n]",
					chars:      []rune{' ', '\t', '\r', '\n'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "ALPHA",
			pos:  position{line: 27, col: 1, offset: 420},
			expr: &charClassMatcher{
				pos:        position{line: 27, col: 9, offset: 428},
				val:        "[a-zA-Z_]",
				chars:      []rune{'_'},
				ranges:     []rune{'a', 'z', 'A', 'Z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 28, col: 1, offset: 438},
			expr: &charClassMatcher{
				pos:        position{line: 28, col: 9, offset: 446},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IDENTIFIER",
			pos:  position{line: 30, col: 1, offset: 453},
			expr: &actionExpr{
				pos: position{line: 30, col: 14, offset: 466},
				run: (*parser).callonIDENTIFIER1,
				expr: &seqExpr{
					pos: position{line: 30, col: 14, offset: 466},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 30, col: 14, offset: 466},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 30, col: 16, offset: 468},
							name: "ALPHA",
						},
						&zeroOrMoreExpr{
							pos: position{line: 30, col: 22, offset: 474},
							expr: &choiceExpr{
								pos: position{line: 30, col: 24, offset: 476},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 30, col: 24, offset: 476},
										name: "ALPHA",
									},
									&ruleRefExpr{
										pos:  position{line: 30, col: 32, offset: 484},
										name: "DIGIT",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 30, col: 41, offset: 493},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "STRING",
			pos:  position{line: 35, col: 1, offset: 558},
			expr: &actionExpr{
				pos: position{line: 35, col: 10, offset: 567},
				run: (*parser).callonSTRING1,
				expr: &seqExpr{
					pos: position{line: 35, col: 10, offset: 567},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 35, col: 10, offset: 567},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 35, col: 12, offset: 569},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 35, col: 16, offset: 573},
							expr: &charClassMatcher{
								pos:        position{line: 35, col: 16, offset: 573},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 35, col: 22, offset: 579},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&ruleRefExpr{
							pos:  position{line: 35, col: 26, offset: 583},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 40, col: 1, offset: 651},
			expr: &actionExpr{
				pos: position{line: 40, col: 10, offset: 660},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 40, col: 10, offset: 660},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 40, col: 10, offset: 660},
							name: "_",
						},
						&oneOrMoreExpr{
							pos: position{line: 40, col: 12, offset: 662},
							expr: &ruleRefExpr{
								pos:  position{line: 40, col: 12, offset: 662},
								name: "DIGIT",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 40, col: 19, offset: 669},
							expr: &seqExpr{
								pos: position{line: 40, col: 20, offset: 670},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 40, col: 20, offset: 670},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&oneOrMoreExpr{
										pos: position{line: 40, col: 24, offset: 674},
										expr: &ruleRefExpr{
											pos:  position{line: 40, col: 24, offset: 674},
											name: "DIGIT",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 40, col: 33, offset: 683},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "LEFT_PAREN",
			pos:  position{line: 49, col: 1, offset: 826},
			expr: &actionExpr{
				pos: position{line: 49, col: 17, offset: 842},
				run: (*parser).callonLEFT_PAREN1,
				expr: &seqExpr{
					pos: position{line: 49, col: 17, offset: 842},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 49, col: 17, offset: 842},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 49, col: 19, offset: 844},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 49, col: 23, offset: 848},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "RIGHT_PAREN",
			pos:  position{line: 50, col: 1, offset: 885},
			expr: &actionExpr{
				pos: position{line: 50, col: 17, offset: 901},
				run: (*parser).callonRIGHT_PAREN1,
				expr: &seqExpr{
					pos: position{line: 50, col: 17, offset: 901},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 50, col: 17, offset: 901},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 50, col: 19, offset: 903},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 50, col: 23, offset: 907},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "LEFT_BRACE",
			pos:  position{line: 51, col: 1, offset: 945},
			expr: &actionExpr{
				pos: position{line: 51, col: 17, offset: 961},
				run: (*parser).callonLEFT_BRACE1,
				expr: &seqExpr{
					pos: position{line: 51, col: 17, offset: 961},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 51, col: 17, offset: 961},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 51, col: 19, offset: 963},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 51, col: 23, offset: 967},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "RIGHT_BRACE",
			pos:  position{line: 52, col: 1, offset: 998},
			expr: &actionExpr{
				pos: position{line: 52, col: 17, offset: 1014},
				run: (*parser).callonRIGHT_BRACE1,
				expr: &seqExpr{
					pos: position{line: 52, col: 17, offset: 1014},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 52, col: 17, offset: 1014},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 52, col: 19, offset: 1016},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 52, col: 23, offset: 1020},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "COMMA",
			pos:  position{line: 53, col: 1, offset: 1052},
			expr: &actionExpr{
				pos: position{line: 53, col: 17, offset: 1068},
				run: (*parser).callonCOMMA1,
				expr: &seqExpr{
					pos: position{line: 53, col: 17, offset: 1068},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 53, col: 17, offset: 1068},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 53, col: 19, offset: 1070},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 23, offset: 1074},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "DOT",
			pos:  position{line: 54, col: 1, offset: 1101},
			expr: &actionExpr{
				pos: position{line: 54, col: 17, offset: 1117},
				run: (*parser).callonDOT1,
				expr: &seqExpr{
					pos: position{line: 54, col: 17, offset: 1117},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 54, col: 17, offset: 1117},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 54, col: 19, offset: 1119},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&ruleRefExpr{
							pos:  position{line: 54, col: 23, offset: 1123},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "MINUS",
			pos:  position{line: 55, col: 1, offset: 1148},
			expr: &actionExpr{
				pos: position{line: 55, col: 17, offset: 1164},
				run: (*parser).callonMINUS1,
				expr: &seqExpr{
					pos: position{line: 55, col: 17, offset: 1164},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 55, col: 17, offset: 1164},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 55, col: 19, offset: 1166},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 55, col: 23, offset: 1170},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "PLUS",
			pos:  position{line: 56, col: 1, offset: 1197},
			expr: &actionExpr{
				pos: position{line: 56, col: 17, offset: 1213},
				run: (*parser).callonPLUS1,
				expr: &seqExpr{
					pos: position{line: 56, col: 17, offset: 1213},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 56, col: 17, offset: 1213},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 56, col: 19, offset: 1215},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 23, offset: 1219},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "SEMICOLON",
			pos:  position{line: 57, col: 1, offset: 1245},
			expr: &actionExpr{
				pos: position{line: 57, col: 17, offset: 1261},
				run: (*parser).callonSEMICOLON1,
				expr: &seqExpr{
					pos: position{line: 57, col: 17, offset: 1261},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 57, col: 17, offset: 1261},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 57, col: 19, offset: 1263},
							val:        ";",
							ignoreCase: false,
							want:       "\";\"",
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 23, offset: 1267},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "SLASH",
			pos:  position{line: 58, col: 1, offset: 1298},
			expr: &actionExpr{
				pos: position{line: 58, col: 17, offset: 1314},
				run: (*parser).callonSLASH1,
				expr: &seqExpr{
					pos: position{line: 58, col: 17, offset: 1314},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 58, col: 17, offset: 1314},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 58, col: 19, offset: 1316},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 23, offset: 1320},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "STAR",
			pos:  position{line: 59, col: 1, offset: 1347},
			expr: &actionExpr{
				pos: position{line: 59, col: 17, offset: 1363},
				run: (*parser).callonSTAR1,
				expr: &seqExpr{
					pos: position{line: 59, col: 17, offset: 1363},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 59, col: 17, offset: 1363},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 59, col: 19, offset: 1365},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 59, col: 23, offset: 1369},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "BANG",
			pos:  position{line: 60, col: 1, offset: 1395},
			expr: &actionExpr{
				pos: position{line: 60, col: 17, offset: 1411},
				run: (*parser).callonBANG1,
				expr: &seqExpr{
					pos: position{line: 60, col: 17, offset: 1411},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 60, col: 17, offset: 1411},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 60, col: 19, offset: 1413},
							val:        "!",
							ignoreCase: false,
							want:       "\"!\"",
						},
						&ruleRefExpr{
							pos:  position{line: 60, col: 23, offset: 1417},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "EQUAL",
			pos:  position{line: 61, col: 1, offset: 1443},
			expr: &actionExpr{
				pos: position{line: 61, col: 17, offset: 1459},
				run: (*parser).callonEQUAL1,
				expr: &seqExpr{
					pos: position{line: 61, col: 17, offset: 1459},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 61, col: 17, offset: 1459},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 61, col: 19, offset: 1461},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 61, col: 23, offset: 1465},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GREATER",
			pos:  position{line: 62, col: 1, offset: 1492},
			expr: &actionExpr{
				pos: position{line: 62, col: 17, offset: 1508},
				run: (*parser).callonGREATER1,
				expr: &seqExpr{
					pos: position{line: 62, col: 17, offset: 1508},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 62, col: 17, offset: 1508},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 62, col: 19, offset: 1510},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&ruleRefExpr{
							pos:  position{line: 62, col: 23, offset: 1514},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "LESS",
			pos:  position{line: 63, col: 1, offset: 1543},
			expr: &actionExpr{
				pos: position{line: 63, col: 17, offset: 1559},
				run: (*parser).callonLESS1,
				expr: &seqExpr{
					pos: position{line: 63, col: 17, offset: 1559},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 63, col: 17, offset: 1559},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 63, col: 19, offset: 1561},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&ruleRefExpr{
							pos:  position{line: 63, col: 23, offset: 1565},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "BANG_EQUAL",
			pos:  position{line: 65, col: 1, offset: 1592},
			expr: &actionExpr{
				pos: position{line: 65, col: 17, offset: 1608},
				run: (*parser).callonBANG_EQUAL1,
				expr: &seqExpr{
					pos: position{line: 65, col: 17, offset: 1608},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 65, col: 17, offset: 1608},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 65, col: 19, offset: 1610},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 65, col: 24, offset: 1615},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "EQUAL_EQUAL",
			pos:  position{line: 66, col: 1, offset: 1646},
			expr: &actionExpr{
				pos: position{line: 66, col: 17, offset: 1662},
				run: (*parser).callonEQUAL_EQUAL1,
				expr: &seqExpr{
					pos: position{line: 66, col: 17, offset: 1662},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 66, col: 17, offset: 1662},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 66, col: 19, offset: 1664},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
						&ruleRefExpr{
							pos:  position{line: 66, col: 24, offset: 1669},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GREATER_EQUAL",
			pos:  position{line: 67, col: 1, offset: 1701},
			expr: &actionExpr{
				pos: position{line: 67, col: 17, offset: 1717},
				run: (*parser).callonGREATER_EQUAL1,
				expr: &seqExpr{
					pos: position{line: 67, col: 17, offset: 1717},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 67, col: 17, offset: 1717},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 67, col: 19, offset: 1719},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 24, offset: 1724},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "LESS_EQUAL",
			pos:  position{line: 68, col: 1, offset: 1758},
			expr: &actionExpr{
				pos: position{line: 68, col: 17, offset: 1774},
				run: (*parser).callonLESS_EQUAL1,
				expr: &seqExpr{
					pos: position{line: 68, col: 17, offset: 1774},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 68, col: 17, offset: 1774},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 68, col: 19, offset: 1776},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 68, col: 24, offset: 1781},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "AND",
			pos:  position{line: 70, col: 1, offset: 1813},
			expr: &actionExpr{
				pos: position{line: 70, col: 17, offset: 1829},
				run: (*parser).callonAND1,
				expr: &seqExpr{
					pos: position{line: 70, col: 17, offset: 1829},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 70, col: 17, offset: 1829},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 70, col: 19, offset: 1831},
							val:        "and",
							ignoreCase: false,
							want:       "\"and\"",
						},
						&ruleRefExpr{
							pos:  position{line: 70, col: 28, offset: 1840},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "CLASS",
			pos:  position{line: 71, col: 1, offset: 1865},
			expr: &actionExpr{
				pos: position{line: 71, col: 17, offset: 1881},
				run: (*parser).callonCLASS1,
				expr: &seqExpr{
					pos: position{line: 71, col: 17, offset: 1881},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 71, col: 17, offset: 1881},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 71, col: 19, offset: 1883},
							val:        "class",
							ignoreCase: false,
							want:       "\"class\"",
						},
						&ruleRefExpr{
							pos:  position{line: 71, col: 28, offset: 1892},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ELSE",
			pos:  position{line: 72, col: 1, offset: 1919},
			expr: &actionExpr{
				pos: position{line: 72, col: 17, offset: 1935},
				run: (*parser).callonELSE1,
				expr: &seqExpr{
					pos: position{line: 72, col: 17, offset: 1935},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 72, col: 17, offset: 1935},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 72, col: 19, offset: 1937},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 28, offset: 1946},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "FALSE",
			pos:  position{line: 73, col: 1, offset: 1972},
			expr: &actionExpr{
				pos: position{line: 73, col: 17, offset: 1988},
				run: (*parser).callonFALSE1,
				expr: &seqExpr{
					pos: position{line: 73, col: 17, offset: 1988},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 73, col: 17, offset: 1988},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 73, col: 19, offset: 1990},
							val:        "false",
							ignoreCase: false,
							want:       "\"false\"",
						},
						&ruleRefExpr{
							pos:  position{line: 73, col: 28, offset: 1999},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "FOR",
			pos:  position{line: 74, col: 1, offset: 2026},
			expr: &actionExpr{
				pos: position{line: 74, col: 17, offset: 2042},
				run: (*parser).callonFOR1,
				expr: &seqExpr{
					pos: position{line: 74, col: 17, offset: 2042},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 74, col: 17, offset: 2042},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 74, col: 19, offset: 2044},
							val:        "for",
							ignoreCase: false,
							want:       "\"for\"",
						},
						&ruleRefExpr{
							pos:  position{line: 74, col: 28, offset: 2053},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "FUN",
			pos:  position{line: 75, col: 1, offset: 2078},
			expr: &actionExpr{
				pos: position{line: 75, col: 17, offset: 2094},
				run: (*parser).callonFUN1,
				expr: &seqExpr{
					pos: position{line: 75, col: 17, offset: 2094},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 75, col: 17, offset: 2094},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 75, col: 19, offset: 2096},
							val:        "fun",
							ignoreCase: false,
							want:       "\"fun\"",
						},
						&ruleRefExpr{
							pos:  position{line: 75, col: 28, offset: 2105},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "IF",
			pos:  position{line: 76, col: 1, offset: 2130},
			expr: &actionExpr{
				pos: position{line: 76, col: 17, offset: 2146},
				run: (*parser).callonIF1,
				expr: &seqExpr{
					pos: position{line: 76, col: 17, offset: 2146},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 76, col: 17, offset: 2146},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 76, col: 19, offset: 2148},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&ruleRefExpr{
							pos:  position{line: 76, col: 28, offset: 2157},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "NIL",
			pos:  position{line: 77, col: 1, offset: 2181},
			expr: &actionExpr{
				pos: position{line: 77, col: 17, offset: 2197},
				run: (*parser).callonNIL1,
				expr: &seqExpr{
					pos: position{line: 77, col: 17, offset: 2197},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 77, col: 17, offset: 2197},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 77, col: 19, offset: 2199},
							val:        "nil",
							ignoreCase: false,
							want:       "\"nil\"",
						},
						&ruleRefExpr{
							pos:  position{line: 77, col: 28, offset: 2208},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "OR",
			pos:  position{line: 78, col: 1, offset: 2233},
			expr: &actionExpr{
				pos: position{line: 78, col: 17, offset: 2249},
				run: (*parser).callonOR1,
				expr: &seqExpr{
					pos: position{line: 78, col: 17, offset: 2249},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 78, col: 17, offset: 2249},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 78, col: 19, offset: 2251},
							val:        "or",
							ignoreCase: false,
							want:       "\"or\"",
						},
						&ruleRefExpr{
							pos:  position{line: 78, col: 28, offset: 2260},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "PRINT",
			pos:  position{line: 79, col: 1, offset: 2284},
			expr: &actionExpr{
				pos: position{line: 79, col: 17, offset: 2300},
				run: (*parser).callonPRINT1,
				expr: &seqExpr{
					pos: position{line: 79, col: 17, offset: 2300},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 79, col: 17, offset: 2300},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 79, col: 19, offset: 2302},
							val:        "print",
							ignoreCase: false,
							want:       "\"print\"",
						},
						&ruleRefExpr{
							pos:  position{line: 79, col: 28, offset: 2311},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "RETURN",
			pos:  position{line: 80, col: 1, offset: 2338},
			expr: &actionExpr{
				pos: position{line: 80, col: 17, offset: 2354},
				run: (*parser).callonRETURN1,
				expr: &seqExpr{
					pos: position{line: 80, col: 17, offset: 2354},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 80, col: 17, offset: 2354},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 80, col: 19, offset: 2356},
							val:        "return",
							ignoreCase: false,
							want:       "\"return\"",
						},
						&ruleRefExpr{
							pos:  position{line: 80, col: 28, offset: 2365},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "SUPER",
			pos:  position{line: 81, col: 1, offset: 2393},
			expr: &actionExpr{
				pos: position{line: 81, col: 17, offset: 2409},
				run: (*parser).callonSUPER1,
				expr: &seqExpr{
					pos: position{line: 81, col: 17, offset: 2409},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 81, col: 17, offset: 2409},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 81, col: 19, offset: 2411},
							val:        "super",
							ignoreCase: false,
							want:       "\"super\"",
						},
						&ruleRefExpr{
							pos:  position{line: 81, col: 28, offset: 2420},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "THIS",
			pos:  position{line: 82, col: 1, offset: 2447},
			expr: &actionExpr{
				pos: position{line: 82, col: 17, offset: 2463},
				run: (*parser).callonTHIS1,
				expr: &seqExpr{
					pos: position{line: 82, col: 17, offset: 2463},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 82, col: 17, offset: 2463},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 82, col: 19, offset: 2465},
							val:        "this",
							ignoreCase: false,
							want:       "\"this\"",
						},
						&ruleRefExpr{
							pos:  position{line: 82, col: 28, offset: 2474},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "TRUE",
			pos:  position{line: 83, col: 1, offset: 2500},
			expr: &actionExpr{
				pos: position{line: 83, col: 17, offset: 2516},
				run: (*parser).callonTRUE1,
				expr: &seqExpr{
					pos: position{line: 83, col: 17, offset: 2516},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 83, col: 17, offset: 2516},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 83, col: 19, offset: 2518},
							val:        "true",
							ignoreCase: false,
							want:       "\"true\"",
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 28, offset: 2527},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "VAR",
			pos:  position{line: 84, col: 1, offset: 2553},
			expr: &actionExpr{
				pos: position{line: 84, col: 17, offset: 2569},
				run: (*parser).callonVAR1,
				expr: &seqExpr{
					pos: position{line: 84, col: 17, offset: 2569},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 84, col: 17, offset: 2569},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 84, col: 19, offset: 2571},
							val:        "var",
							ignoreCase: false,
							want:       "\"var\"",
						},
						&ruleRefExpr{
							pos:  position{line: 84, col: 28, offset: 2580},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "WHILE",
			pos:  position{line: 85, col: 1, offset: 2605},
			expr: &actionExpr{
				pos: position{line: 85, col: 17, offset: 2621},
				run: (*parser).callonWHILE1,
				expr: &seqExpr{
					pos: position{line: 85, col: 17, offset: 2621},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 85, col: 17, offset: 2621},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 85, col: 19, offset: 2623},
							val:        "while",
							ignoreCase: false,
							want:       "\"while\"",
						},
						&ruleRefExpr{
							pos:  position{line: 85, col: 28, offset: 2632},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "arguments",
			pos:  position{line: 90, col: 1, offset: 2679},
			expr: &actionExpr{
				pos: position{line: 90, col: 13, offset: 2691},
				run: (*parser).callonarguments1,
				expr: &labeledExpr{
					pos:   position{line: 90, col: 13, offset: 2691},
					label: "pat",
					expr: &seqExpr{
						pos: position{line: 90, col: 18, offset: 2696},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 90, col: 18, offset: 2696},
								name: "Expression",
							},
							&zeroOrMoreExpr{
								pos: position{line: 90, col: 29, offset: 2707},
								expr: &seqExpr{
									pos: position{line: 90, col: 30, offset: 2708},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 90, col: 30, offset: 2708},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 90, col: 36, offset: 2714},
											name: "Expression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "parameters",
			pos:  position{line: 102, col: 1, offset: 2962},
			expr: &actionExpr{
				pos: position{line: 102, col: 14, offset: 2975},
				run: (*parser).callonparameters1,
				expr: &labeledExpr{
					pos:   position{line: 102, col: 14, offset: 2975},
					label: "pat",
					expr: &seqExpr{
						pos: position{line: 102, col: 19, offset: 2980},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 102, col: 19, offset: 2980},
								name: "IDENTIFIER",
							},
							&zeroOrMoreExpr{
								pos: position{line: 102, col: 30, offset: 2991},
								expr: &seqExpr{
									pos: position{line: 102, col: 31, offset: 2992},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 102, col: 31, offset: 2992},
											name: "COMMA",
										},
										&ruleRefExpr{
											pos:  position{line: 102, col: 37, offset: 2998},
											name: "IDENTIFIER",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "function",
			pos:  position{line: 114, col: 1, offset: 3258},
			expr: &actionExpr{
				pos: position{line: 114, col: 12, offset: 3269},
				run: (*parser).callonfunction1,
				expr: &seqExpr{
					pos: position{line: 114, col: 12, offset: 3269},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 114, col: 12, offset: 3269},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 17, offset: 3274},
								name: "IDENTIFIER",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 28, offset: 3285},
							name: "LEFT_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 114, col: 39, offset: 3296},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 114, col: 46, offset: 3303},
								expr: &ruleRefExpr{
									pos:  position{line: 114, col: 46, offset: 3303},
									name: "parameters",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 58, offset: 3315},
							name: "RIGHT_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 114, col: 70, offset: 3327},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 75, offset: 3332},
								name: "Block",
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 125, col: 1, offset: 3521},
			expr: &choiceExpr{
				pos: position{line: 126, col: 4, offset: 3532},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 126, col: 4, offset: 3532},
						run: (*parser).callonPrimary2,
						expr: &ruleRefExpr{
							pos:  position{line: 126, col: 4, offset: 3532},
							name: "TRUE",
						},
					},
					&actionExpr{
						pos: position{line: 127, col: 4, offset: 3589},
						run: (*parser).callonPrimary4,
						expr: &ruleRefExpr{
							pos:  position{line: 127, col: 4, offset: 3589},
							name: "FALSE",
						},
					},
					&actionExpr{
						pos: position{line: 128, col: 4, offset: 3647},
						run: (*parser).callonPrimary6,
						expr: &ruleRefExpr{
							pos:  position{line: 128, col: 4, offset: 3647},
							name: "NIL",
						},
					},
					&actionExpr{
						pos: position{line: 129, col: 4, offset: 3689},
						run: (*parser).callonPrimary8,
						expr: &ruleRefExpr{
							pos:  position{line: 129, col: 4, offset: 3689},
							name: "THIS",
						},
					},
					&actionExpr{
						pos: position{line: 130, col: 4, offset: 3732},
						run: (*parser).callonPrimary10,
						expr: &labeledExpr{
							pos:   position{line: 130, col: 4, offset: 3732},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 6, offset: 3734},
								name: "NUMBER",
							},
						},
					},
					&actionExpr{
						pos: position{line: 131, col: 4, offset: 3766},
						run: (*parser).callonPrimary13,
						expr: &labeledExpr{
							pos:   position{line: 131, col: 4, offset: 3766},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 131, col: 6, offset: 3768},
								name: "STRING",
							},
						},
					},
					&actionExpr{
						pos: position{line: 132, col: 4, offset: 3800},
						run: (*parser).callonPrimary16,
						expr: &labeledExpr{
							pos:   position{line: 132, col: 4, offset: 3800},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 132, col: 6, offset: 3802},
								name: "IDENTIFIER",
							},
						},
					},
					&actionExpr{
						pos: position{line: 133, col: 4, offset: 3834},
						run: (*parser).callonPrimary19,
						expr: &seqExpr{
							pos: position{line: 133, col: 4, offset: 3834},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 133, col: 4, offset: 3834},
									name: "LEFT_PAREN",
								},
								&labeledExpr{
									pos:   position{line: 133, col: 15, offset: 3845},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 133, col: 17, offset: 3847},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 133, col: 28, offset: 3858},
									name: "RIGHT_PAREN",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 136, col: 4, offset: 3894},
						run: (*parser).callonPrimary25,
						expr: &seqExpr{
							pos: position{line: 136, col: 4, offset: 3894},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 136, col: 4, offset: 3894},
									name: "SUPER",
								},
								&ruleRefExpr{
									pos:  position{line: 136, col: 10, offset: 3900},
									name: "DOT",
								},
								&labeledExpr{
									pos:   position{line: 136, col: 14, offset: 3904},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 16, offset: 3906},
										name: "IDENTIFIER",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Call",
			pos:  position{line: 143, col: 1, offset: 4031},
			expr: &actionExpr{
				pos: position{line: 143, col: 8, offset: 4038},
				run: (*parser).callonCall1,
				expr: &seqExpr{
					pos: position{line: 143, col: 8, offset: 4038},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 143, col: 8, offset: 4038},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 10, offset: 4040},
								name: "Primary",
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 18, offset: 4048},
							label: "pat",
							expr: &zeroOrMoreExpr{
								pos: position{line: 143, col: 22, offset: 4052},
								expr: &choiceExpr{
									pos: position{line: 143, col: 23, offset: 4053},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 143, col: 23, offset: 4053},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 143, col: 23, offset: 4053},
													name: "LEFT_PAREN",
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 34, offset: 4064},
													expr: &ruleRefExpr{
														pos:  position{line: 143, col: 34, offset: 4064},
														name: "arguments",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 143, col: 45, offset: 4075},
													name: "RIGHT_PAREN",
												},
											},
										},
										&seqExpr{
											pos: position{line: 143, col: 59, offset: 4089},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 143, col: 59, offset: 4089},
													name: "DOT",
												},
												&ruleRefExpr{
													pos:  position{line: 143, col: 63, offset: 4093},
													name: "IDENTIFIER",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Unary",
			pos:  position{line: 165, col: 1, offset: 4578},
			expr: &choiceExpr{
				pos: position{line: 165, col: 9, offset: 4586},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 165, col: 9, offset: 4586},
						run: (*parser).callonUnary2,
						expr: &seqExpr{
							pos: position{line: 165, col: 9, offset: 4586},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 165, col: 9, offset: 4586},
									label: "op",
									expr: &choiceExpr{
										pos: position{line: 165, col: 13, offset: 4590},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 165, col: 13, offset: 4590},
												name: "BANG",
											},
											&ruleRefExpr{
												pos:  position{line: 165, col: 20, offset: 4597},
												name: "MINUS",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 165, col: 27, offset: 4604},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 165, col: 29, offset: 4606},
										name: "Unary",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 179, col: 5, offset: 4920},
						name: "Call",
					},
				},
			},
		},
		{
			name: "Factor",
			pos:  position{line: 181, col: 1, offset: 4926},
			expr: &actionExpr{
				pos: position{line: 181, col: 14, offset: 4939},
				run: (*parser).callonFactor1,
				expr: &seqExpr{
					pos: position{line: 181, col: 14, offset: 4939},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 181, col: 14, offset: 4939},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 16, offset: 4941},
								name: "Unary",
							},
						},
						&labeledExpr{
							pos:   position{line: 181, col: 27, offset: 4952},
							label: "pat",
							expr: &zeroOrMoreExpr{
								pos: position{line: 181, col: 31, offset: 4956},
								expr: &seqExpr{
									pos: position{line: 181, col: 32, offset: 4957},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 181, col: 33, offset: 4958},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 181, col: 33, offset: 4958},
													name: "SLASH",
												},
												&ruleRefExpr{
													pos:  position{line: 181, col: 41, offset: 4966},
													name: "STAR",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 181, col: 47, offset: 4972},
											name: "Unary",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Term",
			pos:  position{line: 182, col: 1, offset: 5046},
			expr: &actionExpr{
				pos: position{line: 182, col: 14, offset: 5059},
				run: (*parser).callonTerm1,
				expr: &seqExpr{
					pos: position{line: 182, col: 14, offset: 5059},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 182, col: 14, offset: 5059},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 16, offset: 5061},
								name: "Factor",
							},
						},
						&labeledExpr{
							pos:   position{line: 182, col: 27, offset: 5072},
							label: "pat",
							expr: &zeroOrMoreExpr{
								pos: position{line: 182, col: 31, offset: 5076},
								expr: &seqExpr{
									pos: position{line: 182, col: 32, offset: 5077},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 182, col: 33, offset: 5078},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 182, col: 33, offset: 5078},
													name: "MINUS",
												},
												&ruleRefExpr{
													pos:  position{line: 182, col: 41, offset: 5086},
													name: "PLUS",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 182, col: 47, offset: 5092},
											name: "Factor",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Comparison",
			pos:  position{line: 183, col: 1, offset: 5166},
			expr: &actionExpr{
				pos: position{line: 183, col: 14, offset: 5179},
				run: (*parser).callonComparison1,
				expr: &seqExpr{
					pos: position{line: 183, col: 14, offset: 5179},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 183, col: 14, offset: 5179},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 16, offset: 5181},
								name: "Term",
							},
						},
						&labeledExpr{
							pos:   position{line: 183, col: 27, offset: 5192},
							label: "pat",
							expr: &zeroOrMoreExpr{
								pos: position{line: 183, col: 31, offset: 5196},
								expr: &seqExpr{
									pos: position{line: 183, col: 32, offset: 5197},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 183, col: 33, offset: 5198},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 183, col: 33, offset: 5198},
													name: "GREATER_EQUAL",
												},
												&ruleRefExpr{
													pos:  position{line: 183, col: 49, offset: 5214},
													name: "LESS_EQUAL",
												},
												&ruleRefExpr{
													pos:  position{line: 183, col: 62, offset: 5227},
													name: "GREATER",
												},
												&ruleRefExpr{
													pos:  position{line: 183, col: 72, offset: 5237},
													name: "LESS",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 183, col: 78, offset: 5243},
											name: "Term",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Equality",
			pos:  position{line: 184, col: 1, offset: 5286},
			expr: &actionExpr{
				pos: position{line: 184, col: 14, offset: 5299},
				run: (*parser).callonEquality1,
				expr: &seqExpr{
					pos: position{line: 184, col: 14, offset: 5299},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 184, col: 14, offset: 5299},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 16, offset: 5301},
								name: "Comparison",
							},
						},
						&labeledExpr{
							pos:   position{line: 184, col: 27, offset: 5312},
							label: "pat",
							expr: &zeroOrMoreExpr{
								pos: position{line: 184, col: 31, offset: 5316},
								expr: &seqExpr{
									pos: position{line: 184, col: 32, offset: 5317},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 184, col: 33, offset: 5318},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 184, col: 33, offset: 5318},
													name: "BANG_EQUAL",
												},
												&ruleRefExpr{
													pos:  position{line: 184, col: 46, offset: 5331},
													name: "EQUAL_EQUAL",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 184, col: 59, offset: 5344},
											name: "Comparison",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAnd",
			pos:  position{line: 185, col: 1, offset: 5406},
			expr: &actionExpr{
				pos: position{line: 185, col: 14, offset: 5419},
				run: (*parser).callonLogicalAnd1,
				expr: &seqExpr{
					pos: position{line: 185, col: 14, offset: 5419},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 185, col: 14, offset: 5419},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 16, offset: 5421},
								name: "Equality",
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 27, offset: 5432},
							label: "pat",
							expr: &zeroOrMoreExpr{
								pos: position{line: 185, col: 31, offset: 5436},
								expr: &seqExpr{
									pos: position{line: 185, col: 32, offset: 5437},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 185, col: 32, offset: 5437},
											name: "AND",
										},
										&ruleRefExpr{
											pos:  position{line: 185, col: 36, offset: 5441},
											name: "Equality",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOr",
			pos:  position{line: 186, col: 1, offset: 5526},
			expr: &actionExpr{
				pos: position{line: 186, col: 14, offset: 5539},
				run: (*parser).callonLogicalOr1,
				expr: &seqExpr{
					pos: position{line: 186, col: 14, offset: 5539},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 186, col: 14, offset: 5539},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 186, col: 16, offset: 5541},
								name: "LogicalAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 186, col: 27, offset: 5552},
							label: "pat",
							expr: &zeroOrMoreExpr{
								pos: position{line: 186, col: 31, offset: 5556},
								expr: &seqExpr{
									pos: position{line: 186, col: 32, offset: 5557},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 186, col: 32, offset: 5557},
											name: "OR",
										},
										&ruleRefExpr{
											pos:  position{line: 186, col: 35, offset: 5560},
											name: "LogicalAnd",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 188, col: 1, offset: 5647},
			expr: &choiceExpr{
				pos: position{line: 188, col: 14, offset: 5660},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 188, col: 14, offset: 5660},
						run: (*parser).callonAssignment2,
						expr: &seqExpr{
							pos: position{line: 188, col: 14, offset: 5660},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 188, col: 14, offset: 5660},
									label: "prev",
									expr: &zeroOrOneExpr{
										pos: position{line: 188, col: 19, offset: 5665},
										expr: &seqExpr{
											pos: position{line: 188, col: 20, offset: 5666},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 188, col: 20, offset: 5666},
													name: "Call",
												},
												&ruleRefExpr{
													pos:  position{line: 188, col: 25, offset: 5671},
													name: "DOT",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 188, col: 31, offset: 5677},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 33, offset: 5679},
										name: "IDENTIFIER",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 188, col: 44, offset: 5690},
									name: "EQUAL",
								},
								&labeledExpr{
									pos:   position{line: 188, col: 50, offset: 5696},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 52, offset: 5698},
										name: "Assignment",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 5, offset: 6036},
						name: "LogicalOr",
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 205, col: 1, offset: 6047},
			expr: &ruleRefExpr{
				pos:  position{line: 205, col: 14, offset: 6060},
				name: "Assignment",
			},
		},
		{
			name: "Statement",
			pos:  position{line: 210, col: 1, offset: 6095},
			expr: &choiceExpr{
				pos: position{line: 211, col: 4, offset: 6108},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 211, col: 4, offset: 6108},
						name: "ForStatement",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 4, offset: 6124},
						name: "IfStatement",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 4, offset: 6139},
						name: "PrintStatement",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 4, offset: 6157},
						name: "ReturnStatement",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 4, offset: 6176},
						name: "WhileStatement",
					},
					&ruleRefExpr{
						pos:  position{line: 216, col: 4, offset: 6194},
						name: "Block",
					},
					&ruleRefExpr{
						pos:  position{line: 217, col: 4, offset: 6203},
						name: "ExpressionStatement",
					},
				},
			},
		},
		{
			name: "ExpressionStatement",
			pos:  position{line: 219, col: 1, offset: 6224},
			expr: &actionExpr{
				pos: position{line: 219, col: 23, offset: 6246},
				run: (*parser).callonExpressionStatement1,
				expr: &seqExpr{
					pos: position{line: 219, col: 23, offset: 6246},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 219, col: 23, offset: 6246},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 25, offset: 6248},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 219, col: 36, offset: 6259},
							name: "SEMICOLON",
						},
					},
				},
			},
		},
		{
			name: "ForStatement",
			pos:  position{line: 223, col: 1, offset: 6344},
			expr: &actionExpr{
				pos: position{line: 223, col: 16, offset: 6359},
				run: (*parser).callonForStatement1,
				expr: &seqExpr{
					pos: position{line: 223, col: 16, offset: 6359},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 223, col: 16, offset: 6359},
							name: "FOR",
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 20, offset: 6363},
							name: "LEFT_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 224, col: 2, offset: 6376},
							label: "init",
							expr: &choiceExpr{
								pos: position{line: 224, col: 8, offset: 6382},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 224, col: 8, offset: 6382},
										name: "VarDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 224, col: 25, offset: 6399},
										name: "ExpressionStatement",
									},
									&ruleRefExpr{
										pos:  position{line: 224, col: 47, offset: 6421},
										name: "SEMICOLON",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 225, col: 2, offset: 6434},
							label: "cond",
							expr: &zeroOrOneExpr{
								pos: position{line: 225, col: 7, offset: 6439},
								expr: &ruleRefExpr{
									pos:  position{line: 225, col: 7, offset: 6439},
									name: "Expression",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 225, col: 19, offset: 6451},
							name: "SEMICOLON",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 2, offset: 6463},
							label: "inc",
							expr: &zeroOrOneExpr{
								pos: position{line: 226, col: 6, offset: 6467},
								expr: &ruleRefExpr{
									pos:  position{line: 226, col: 6, offset: 6467},
									name: "Expression",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 1, offset: 6479},
							name: "RIGHT_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 13, offset: 6491},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 15, offset: 6493},
								name: "Statement",
							},
						},
					},
				},
			},
		},
		{
			name: "IfStatement",
			pos:  position{line: 247, col: 1, offset: 6875},
			expr: &actionExpr{
				pos: position{line: 247, col: 15, offset: 6889},
				run: (*parser).callonIfStatement1,
				expr: &seqExpr{
					pos: position{line: 247, col: 15, offset: 6889},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 247, col: 15, offset: 6889},
							name: "IF",
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 18, offset: 6892},
							name: "LEFT_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 247, col: 29, offset: 6903},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 34, offset: 6908},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 45, offset: 6919},
							name: "RIGHT_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 247, col: 57, offset: 6931},
							label: "then",
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 62, offset: 6936},
								name: "Statement",
							},
						},
						&labeledExpr{
							pos:   position{line: 247, col: 72, offset: 6946},
							label: "otherwise",
							expr: &zeroOrOneExpr{
								pos: position{line: 247, col: 82, offset: 6956},
								expr: &seqExpr{
									pos: position{line: 247, col: 83, offset: 6957},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 247, col: 83, offset: 6957},
											name: "ELSE",
										},
										&ruleRefExpr{
											pos:  position{line: 247, col: 88, offset: 6962},
											name: "Statement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrintStatement",
			pos:  position{line: 258, col: 1, offset: 7183},
			expr: &actionExpr{
				pos: position{line: 258, col: 18, offset: 7200},
				run: (*parser).callonPrintStatement1,
				expr: &seqExpr{
					pos: position{line: 258, col: 18, offset: 7200},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 258, col: 18, offset: 7200},
							name: "PRINT",
						},
						&labeledExpr{
							pos:   position{line: 258, col: 24, offset: 7206},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 26, offset: 7208},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 37, offset: 7219},
							name: "SEMICOLON",
						},
					},
				},
			},
		},
		{
			name: "ReturnStatement",
			pos:  position{line: 264, col: 1, offset: 7305},
			expr: &actionExpr{
				pos: position{line: 264, col: 19, offset: 7323},
				run: (*parser).callonReturnStatement1,
				expr: &seqExpr{
					pos: position{line: 264, col: 19, offset: 7323},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 264, col: 19, offset: 7323},
							name: "RETURN",
						},
						&labeledExpr{
							pos:   position{line: 264, col: 26, offset: 7330},
							label: "e",
							expr: &zeroOrOneExpr{
								pos: position{line: 264, col: 28, offset: 7332},
								expr: &ruleRefExpr{
									pos:  position{line: 264, col: 28, offset: 7332},
									name: "Expression",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 264, col: 40, offset: 7344},
							name: "SEMICOLON",
						},
					},
				},
			},
		},
		{
			name: "WhileStatement",
			pos:  position{line: 272, col: 1, offset: 7468},
			expr: &actionExpr{
				pos: position{line: 272, col: 18, offset: 7485},
				run: (*parser).callonWhileStatement1,
				expr: &seqExpr{
					pos: position{line: 272, col: 18, offset: 7485},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 272, col: 18, offset: 7485},
							name: "WHILE",
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 24, offset: 7491},
							name: "LEFT_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 35, offset: 7502},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 40, offset: 7507},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 51, offset: 7518},
							name: "RIGHT_PAREN",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 63, offset: 7530},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 65, offset: 7532},
								name: "Statement",
							},
						},
					},
				},
			},
		},
		{
			name: "Block",
			pos:  position{line: 279, col: 1, offset: 7652},
			expr: &actionExpr{
				pos: position{line: 279, col: 9, offset: 7660},
				run: (*parser).callonBlock1,
				expr: &seqExpr{
					pos: position{line: 279, col: 9, offset: 7660},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 279, col: 9, offset: 7660},
							name: "LEFT_BRACE",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 20, offset: 7671},
							label: "d",
							expr: &zeroOrMoreExpr{
								pos: position{line: 279, col: 22, offset: 7673},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 22, offset: 7673},
									name: "Declaration",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 35, offset: 7686},
							name: "RIGHT_BRACE",
						},
					},
				},
			},
		},
		{
			name: "Declaration",
			pos:  position{line: 290, col: 1, offset: 7896},
			expr: &choiceExpr{
				pos: position{line: 291, col: 4, offset: 7911},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 291, col: 4, offset: 7911},
						name: "ClassDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 292, col: 4, offset: 7931},
						name: "FunDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 293, col: 4, offset: 7949},
						name: "VarDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 294, col: 4, offset: 7967},
						name: "StatementDeclaration",
					},
				},
			},
		},
		{
			name: "StatementDeclaration",
			pos:  position{line: 296, col: 1, offset: 7989},
			expr: &actionExpr{
				pos: position{line: 296, col: 24, offset: 8012},
				run: (*parser).callonStatementDeclaration1,
				expr: &labeledExpr{
					pos:   position{line: 296, col: 24, offset: 8012},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 296, col: 26, offset: 8014},
						name: "Statement",
					},
				},
			},
		},
		{
			name: "ClassDeclaration",
			pos:  position{line: 302, col: 1, offset: 8104},
			expr: &actionExpr{
				pos: position{line: 302, col: 20, offset: 8123},
				run: (*parser).callonClassDeclaration1,
				expr: &seqExpr{
					pos: position{line: 302, col: 20, offset: 8123},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 302, col: 20, offset: 8123},
							name: "CLASS",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 26, offset: 8129},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 28, offset: 8131},
								name: "IDENTIFIER",
							},
						},
						&labeledExpr{
							pos:   position{line: 302, col: 39, offset: 8142},
							label: "ext",
							expr: &zeroOrOneExpr{
								pos: position{line: 302, col: 43, offset: 8146},
								expr: &seqExpr{
									pos: position{line: 302, col: 44, offset: 8147},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 302, col: 44, offset: 8147},
											name: "LESS",
										},
										&ruleRefExpr{
											pos:  position{line: 302, col: 49, offset: 8152},
											name: "IDENTIFIER",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 62, offset: 8165},
							name: "LEFT_BRACE",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 73, offset: 8176},
							label: "m",
							expr: &zeroOrMoreExpr{
								pos: position{line: 302, col: 75, offset: 8178},
								expr: &ruleRefExpr{
									pos:  position{line: 302, col: 75, offset: 8178},
									name: "function",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 85, offset: 8188},
							name: "RIGHT_BRACE",
						},
					},
				},
			},
		},
		{
			name: "FunDeclaration",
			pos:  position{line: 318, col: 1, offset: 8553},
			expr: &actionExpr{
				pos: position{line: 318, col: 18, offset: 8570},
				run: (*parser).callonFunDeclaration1,
				expr: &seqExpr{
					pos: position{line: 318, col: 18, offset: 8570},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 318, col: 18, offset: 8570},
							name: "FUN",
						},
						&labeledExpr{
							pos:   position{line: 318, col: 22, offset: 8574},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 24, offset: 8576},
								name: "function",
							},
						},
					},
				},
			},
		},
		{
			name: "VarDeclaration",
			pos:  position{line: 320, col: 1, offset: 8604},
			expr: &actionExpr{
				pos: position{line: 320, col: 18, offset: 8621},
				run: (*parser).callonVarDeclaration1,
				expr: &seqExpr{
					pos: position{line: 320, col: 18, offset: 8621},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 320, col: 18, offset: 8621},
							name: "VAR",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 22, offset: 8625},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 24, offset: 8627},
								name: "IDENTIFIER",
							},
						},
						&labeledExpr{
							pos:   position{line: 320, col: 35, offset: 8638},
							label: "init",
							expr: &zeroOrOneExpr{
								pos: position{line: 320, col: 40, offset: 8643},
								expr: &seqExpr{
									pos: position{line: 320, col: 41, offset: 8644},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 320, col: 41, offset: 8644},
											name: "EQUAL",
										},
										&ruleRefExpr{
											pos:  position{line: 320, col: 47, offset: 8650},
											name: "Expression",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 320, col: 60, offset: 8663},
							name: "SEMICOLON",
						},
					},
				},
			},
		},
		{
			name: "Program",
			pos:  position{line: 332, col: 1, offset: 8888},
			expr: &actionExpr{
				pos: position{line: 332, col: 11, offset: 8898},
				run: (*parser).callonProgram1,
				expr: &labeledExpr{
					pos:   position{line: 332, col: 11, offset: 8898},
					label: "d",
					expr: &zeroOrMoreExpr{
						pos: position{line: 332, col: 13, offset: 8900},
						expr: &ruleRefExpr{
							pos:  position{line: 332, col: 13, offset: 8900},
							name: "Declaration",
						},
					},
				},
			},
		},
	},
}

func (c *current) onIDENTIFIER1() (any, error) {
	str := matchedTextOf(c)
	return ast.Identifier(str), nil
}

func (p *parser) callonIDENTIFIER1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIDENTIFIER1()
}

func (c *current) onSTRING1() (any, error) {
	str := matchedTextOf(c)
	return ast.StringLiteral(str), nil
}

func (p *parser) callonSTRING1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTRING1()
}

func (c *current) onNUMBER1() (any, error) {
	str := matchedTextOf(c)
	n, err := strconv.ParseFloat(str, 64)
	if err != nil {
		return nil, err
	}
	return ast.NumberLiteral(n), nil
}

func (p *parser) callonNUMBER1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onLEFT_PAREN1() (any, error) {
	return TokLeftParenthesis, nil
}

func (p *parser) callonLEFT_PAREN1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT_PAREN1()
}

func (c *current) onRIGHT_PAREN1() (any, error) {
	return TokRightParenthesis, nil
}

func (p *parser) callonRIGHT_PAREN1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT_PAREN1()
}

func (c *current) onLEFT_BRACE1() (any, error) {
	return TokLeftBrace, nil
}

func (p *parser) callonLEFT_BRACE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT_BRACE1()
}

func (c *current) onRIGHT_BRACE1() (any, error) {
	return TokRightBrace, nil
}

func (p *parser) callonRIGHT_BRACE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT_BRACE1()
}

func (c *current) onCOMMA1() (any, error) {
	return TokComma, nil
}

func (p *parser) callonCOMMA1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMMA1()
}

func (c *current) onDOT1() (any, error) {
	return TokDot, nil
}

func (p *parser) callonDOT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDOT1()
}

func (c *current) onMINUS1() (any, error) {
	return TokMinus, nil
}

func (p *parser) callonMINUS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMINUS1()
}

func (c *current) onPLUS1() (any, error) {
	return TokPlus, nil
}

func (p *parser) callonPLUS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPLUS1()
}

func (c *current) onSEMICOLON1() (any, error) {
	return TokSemicolon, nil
}

func (p *parser) callonSEMICOLON1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSEMICOLON1()
}

func (c *current) onSLASH1() (any, error) {
	return TokSlash, nil
}

func (p *parser) callonSLASH1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSLASH1()
}

func (c *current) onSTAR1() (any, error) {
	return TokStar, nil
}

func (p *parser) callonSTAR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSTAR1()
}

func (c *current) onBANG1() (any, error) {
	return TokBang, nil
}

func (p *parser) callonBANG1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBANG1()
}

func (c *current) onEQUAL1() (any, error) {
	return TokEqual, nil
}

func (p *parser) callonEQUAL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEQUAL1()
}

func (c *current) onGREATER1() (any, error) {
	return TokGreater, nil
}

func (p *parser) callonGREATER1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGREATER1()
}

func (c *current) onLESS1() (any, error) {
	return TokLess, nil
}

func (p *parser) callonLESS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLESS1()
}

func (c *current) onBANG_EQUAL1() (any, error) {
	return TokBangEqual, nil
}

func (p *parser) callonBANG_EQUAL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBANG_EQUAL1()
}

func (c *current) onEQUAL_EQUAL1() (any, error) {
	return TokEqualEqual, nil
}

func (p *parser) callonEQUAL_EQUAL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEQUAL_EQUAL1()
}

func (c *current) onGREATER_EQUAL1() (any, error) {
	return TokGreaterEqual, nil
}

func (p *parser) callonGREATER_EQUAL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGREATER_EQUAL1()
}

func (c *current) onLESS_EQUAL1() (any, error) {
	return TokLessEqual, nil
}

func (p *parser) callonLESS_EQUAL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLESS_EQUAL1()
}

func (c *current) onAND1() (any, error) {
	return TokAnd, nil
}

func (p *parser) callonAND1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAND1()
}

func (c *current) onCLASS1() (any, error) {
	return TokClass, nil
}

func (p *parser) callonCLASS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCLASS1()
}

func (c *current) onELSE1() (any, error) {
	return TokElse, nil
}

func (p *parser) callonELSE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onELSE1()
}

func (c *current) onFALSE1() (any, error) {
	return TokFalse, nil
}

func (p *parser) callonFALSE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFALSE1()
}

func (c *current) onFOR1() (any, error) {
	return TokFor, nil
}

func (p *parser) callonFOR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFOR1()
}

func (c *current) onFUN1() (any, error) {
	return TokFun, nil
}

func (p *parser) callonFUN1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFUN1()
}

func (c *current) onIF1() (any, error) {
	return TokIf, nil
}

func (p *parser) callonIF1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIF1()
}

func (c *current) onNIL1() (any, error) {
	return TokNil, nil
}

func (p *parser) callonNIL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNIL1()
}

func (c *current) onOR1() (any, error) {
	return TokOr, nil
}

func (p *parser) callonOR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOR1()
}

func (c *current) onPRINT1() (any, error) {
	return TokPrint, nil
}

func (p *parser) callonPRINT1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPRINT1()
}

func (c *current) onRETURN1() (any, error) {
	return TokReturn, nil
}

func (p *parser) callonRETURN1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRETURN1()
}

func (c *current) onSUPER1() (any, error) {
	return TokSuper, nil
}

func (p *parser) callonSUPER1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSUPER1()
}

func (c *current) onTHIS1() (any, error) {
	return TokThis, nil
}

func (p *parser) callonTHIS1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTHIS1()
}

func (c *current) onTRUE1() (any, error) {
	return TokTrue, nil
}

func (p *parser) callonTRUE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTRUE1()
}

func (c *current) onVAR1() (any, error) {
	return TokVar, nil
}

func (p *parser) callonVAR1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVAR1()
}

func (c *current) onWHILE1() (any, error) {
	return TokWhile, nil
}

func (p *parser) callonWHILE1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHILE1()
}

func (c *current) onarguments1(pat any) (any, error) {
	var args []ast.Expression

	p := pat.([]any)
	args = append(args, p[0].(ast.Expression))
	for _, repeat := range p[1].([]any) {
		pattern := repeat.([]any)
		args = append(args, pattern[1].(ast.Expression))
	}
	return args, nil
}

func (p *parser) callonarguments1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarguments1(stack["pat"])
}

func (c *current) onparameters1(pat any) (any, error) {
	var idents []ast.Identifier

	p := pat.([]any)
	idents = append(idents, p[0].(ast.Identifier))
	for _, repeat := range p[1].([]any) {
		pattern := repeat.([]any)
		idents = append(idents, pattern[1].(ast.Identifier))
	}
	return idents, nil
}

func (p *parser) callonparameters1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparameters1(stack["pat"])
}

func (c *current) onfunction1(name, params, body any) (any, error) {
	return &ast.FunDeclaration{
		Name:       name.(ast.Identifier),
		Parameters: params.([]ast.Identifier),
		Body:       body.(*ast.BlockStatement),
	}, nil
}

func (p *parser) callonfunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfunction1(stack["name"], stack["params"], stack["body"])
}

func (c *current) onPrimary2() (any, error) {
	return ast.BooleanLiteral(true), nil
}

func (p *parser) callonPrimary2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary2()
}

func (c *current) onPrimary4() (any, error) {
	return ast.BooleanLiteral(false), nil
}

func (p *parser) callonPrimary4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary4()
}

func (c *current) onPrimary6() (any, error) {
	return ast.Nil{}, nil
}

func (p *parser) callonPrimary6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary6()
}

func (c *current) onPrimary8() (any, error) {
	return ast.This{}, nil
}

func (p *parser) callonPrimary8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary8()
}

func (c *current) onPrimary10(n any) (any, error) {
	return n, nil
}

func (p *parser) callonPrimary10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary10(stack["n"])
}

func (c *current) onPrimary13(s any) (any, error) {
	return s, nil
}

func (p *parser) callonPrimary13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary13(stack["s"])
}

func (c *current) onPrimary16(i any) (any, error) {
	return i, nil
}

func (p *parser) callonPrimary16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary16(stack["i"])
}

func (c *current) onPrimary19(e any) (any, error) {
	return e, nil

}

func (p *parser) callonPrimary19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary19(stack["e"])
}

func (c *current) onPrimary25(i any) (any, error) {
	return &ast.PropertyAccessExpression{
		Target:   ast.Super{},
		Property: i.(ast.Identifier),
	}, nil

}

func (p *parser) callonPrimary25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary25(stack["i"])
}

func (c *current) onCall1(e, pat any) (any, error) {
	expr := e.(ast.Expression)
	for _, p := range pat.([]any) {
		pattern := p.([]any)
		switch pattern[0].(TokenKind) {
		case TokLeftParenthesis:
			expr = &ast.InvocationExpression{
				Callee:    expr,
				Arguments: pattern[1].([]ast.Expression),
			}
		case TokDot:
			expr = &ast.PropertyAccessExpression{
				Target:   expr,
				Property: pattern[1].(ast.Identifier),
			}
		default:
			panic("unreachable case in peg::grammar::Call")
		}
	}
	return expr, nil
}

func (p *parser) callonCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCall1(stack["e"], stack["pat"])
}

func (c *current) onUnary2(op, u any) (any, error) {
	var operator ast.UnaryOperator
	switch op.(TokenKind) {
	case TokBang:
		operator = ast.UopLogicalNot
	case TokMinus:
		operator = ast.UopNegate
	default:
		panic("unreachable case in peg::grammar::Unary")
	}
	return &ast.UnaryExpression{
		Operator: operator,
		Operand:  u.(ast.Expression),
	}, nil
}

func (p *parser) callonUnary2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnary2(stack["op"], stack["u"])
}

func (c *current) onFactor1(l, pat any) (any, error) {
	return parseBinary(l, pat), nil
}

func (p *parser) callonFactor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFactor1(stack["l"], stack["pat"])
}

func (c *current) onTerm1(l, pat any) (any, error) {
	return parseBinary(l, pat), nil
}

func (p *parser) callonTerm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerm1(stack["l"], stack["pat"])
}

func (c *current) onComparison1(l, pat any) (any, error) {
	return parseBinary(l, pat), nil
}

func (p *parser) callonComparison1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparison1(stack["l"], stack["pat"])
}

func (c *current) onEquality1(l, pat any) (any, error) {
	return parseBinary(l, pat), nil
}

func (p *parser) callonEquality1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality1(stack["l"], stack["pat"])
}

func (c *current) onLogicalAnd1(l, pat any) (any, error) {
	return parseBinary(l, pat), nil
}

func (p *parser) callonLogicalAnd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAnd1(stack["l"], stack["pat"])
}

func (c *current) onLogicalOr1(l, pat any) (any, error) {
	return parseBinary(l, pat), nil
}

func (p *parser) callonLogicalOr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOr1(stack["l"], stack["pat"])
}

func (c *current) onAssignment2(prev, i, e any) (any, error) {
	var expr ast.Expression
	if prev != nil {
		previous := prev.([]any)
		expr = &ast.PropertyAccessExpression{
			Target:   previous[0].(ast.Expression),
			Property: i.(ast.Identifier),
		}
	} else {
		expr = i.(ast.Expression)
	}
	return &ast.AssignmentExpression{
		Target: expr,
		Value:  e.(ast.Expression),
	}, nil
}

func (p *parser) callonAssignment2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment2(stack["prev"], stack["i"], stack["e"])
}

func (c *current) onExpressionStatement1(e any) (any, error) {
	return &ast.ExpressionStatement{Expression: e.(ast.Expression)}, nil
}

func (p *parser) callonExpressionStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionStatement1(stack["e"])
}

func (c *current) onForStatement1(init, cond, inc, b any) (any, error) {
	stmt := &ast.ForStatement{
		Body: b.(ast.Statement),
	}
	switch initializer := init.(type) {
	case *ast.VarDeclaration:
		stmt.VarInitializer = initializer
	case ast.Expression:
		stmt.ExpressionInitializer = initializer
	}
	if cond != nil {
		stmt.Condition = cond.(ast.Expression)
	}
	if inc != nil {
		stmt.Increment = inc.(ast.Expression)
	}
	return stmt, nil
}

func (p *parser) callonForStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForStatement1(stack["init"], stack["cond"], stack["inc"], stack["b"])
}

func (c *current) onIfStatement1(cond, then, otherwise any) (any, error) {
	stmt := &ast.IfStatement{
		Condition: cond.(ast.Expression),
		Then:      then.(ast.Statement),
	}
	if otherwise != nil {
		stmt.Otherwise = (otherwise.([]any))[1].(ast.Statement)
	}
	return stmt, nil
}

func (p *parser) callonIfStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfStatement1(stack["cond"], stack["then"], stack["otherwise"])
}

func (c *current) onPrintStatement1(e any) (any, error) {
	return &ast.PrintStatement{
		Expression: e.(ast.Expression),
	}, nil
}

func (p *parser) callonPrintStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrintStatement1(stack["e"])
}

func (c *current) onReturnStatement1(e any) (any, error) {
	stmt := new(ast.ReturnStatement)
	if e != nil {
		stmt.Expression = e.(ast.Expression)
	}
	return stmt, nil
}

func (p *parser) callonReturnStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturnStatement1(stack["e"])
}

func (c *current) onWhileStatement1(cond, b any) (any, error) {
	return &ast.WhileStatement{
		Condition: cond.(ast.Expression),
		Body:      b.(ast.Statement),
	}, nil
}

func (p *parser) callonWhileStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhileStatement1(stack["cond"], stack["b"])
}

func (c *current) onBlock1(d any) (any, error) {
	var decls []ast.Declaration
	for _, decl := range d.([]any) {
		decls = append(decls, decl.(ast.Declaration))
	}
	return &ast.BlockStatement{Declarations: decls}, nil
}

func (p *parser) callonBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock1(stack["d"])
}

func (c *current) onStatementDeclaration1(s any) (any, error) {
	return &ast.StatementDeclaration{
		Statement: s.(ast.Statement),
	}, nil
}

func (p *parser) callonStatementDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatementDeclaration1(stack["s"])
}

func (c *current) onClassDeclaration1(i, ext, m any) (any, error) {
	var methods []ast.FunDeclaration
	for _, method := range m.([]any) {
		methods = append(methods, method.(ast.FunDeclaration))
	}
	decl := &ast.ClassDeclaration{
		Name:    i.(ast.Identifier),
		Methods: methods,
	}
	if ext != nil {
		decl.Baseclass = new(ast.Identifier)
		*decl.Baseclass = (ext.([]any))[1].(ast.Identifier)
	}
	return decl, nil
}

func (p *parser) callonClassDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClassDeclaration1(stack["i"], stack["ext"], stack["m"])
}

func (c *current) onFunDeclaration1(f any) (any, error) {
	return f, nil
}

func (p *parser) callonFunDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunDeclaration1(stack["f"])
}

func (c *current) onVarDeclaration1(i, init any) (any, error) {
	decl := &ast.VarDeclaration{
		Name: i.(ast.Identifier),
	}
	if init != nil {
		decl.Initializer = (init.([]any))[1].(ast.Expression)
	}
	return decl, nil
}

func (p *parser) callonVarDeclaration1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVarDeclaration1(stack["i"], stack["init"])
}

func (c *current) onProgram1(d any) (any, error) {
	var decls []ast.Declaration
	for _, decl := range d.([]any) {
		decls = append(decls, decl.(ast.Declaration))
	}
	return decls, nil
}

func (p *parser) callonProgram1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProgram1(stack["d"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) { // nolint: deadcode
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) { // nolint: deadcode
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

// nolint: structcheck
type grammar struct {
	pos   position
	rules []*rule
}

// nolint: structcheck
type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

// nolint: structcheck
type choiceExpr struct {
	pos          position
	alternatives []any
}

// nolint: structcheck
type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

// nolint: structcheck
type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

// nolint: structcheck
type seqExpr struct {
	pos   position
	exprs []any
}

// nolint: structcheck
type throwExpr struct {
	pos   position
	label string
}

// nolint: structcheck
type labeledExpr struct {
	pos   position
	label string
	expr  any
}

// nolint: structcheck
type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr // nolint: structcheck
	notExpr        expr // nolint: structcheck
	zeroOrOneExpr  expr // nolint: structcheck
	zeroOrMoreExpr expr // nolint: structcheck
	oneOrMoreExpr  expr // nolint: structcheck
)

// nolint: structcheck
type ruleRefExpr struct {
	pos  position
	name string
}

// nolint: structcheck
type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

// nolint: structcheck
type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

// nolint: structcheck
type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

// nolint: structcheck
type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

// nolint: structcheck
type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position // nolint: structcheck

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

// nolint: structcheck,deadcode
type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

// nolint: varcheck
const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

// nolint: structcheck,maligned
type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

// nolint: gocyclo
func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

// nolint: gocyclo
func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

// nolint: gocyclo
func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
